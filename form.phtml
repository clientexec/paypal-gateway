<?php $pluginFolderName = basename(dirname(__FILE__)); ?>
<input type="hidden" id="<?php echo $pluginFolderName; ?>_Transaction_ID" name="<?php echo $pluginFolderName; ?>_plugincustomfields[<?php echo $pluginFolderName; ?>_Transaction_ID]" value="">
<input type="hidden" id="<?php echo $pluginFolderName; ?>_Transaction_State" name="<?php echo $pluginFolderName; ?>_plugincustomfields[<?php echo $pluginFolderName; ?>_Transaction_State]" value="">
<input type="hidden" id="<?php echo $pluginFolderName; ?>_Transaction_Amount" name="<?php echo $pluginFolderName; ?>_plugincustomfields[<?php echo $pluginFolderName; ?>_Transaction_Amount]" value="">
<input type="hidden" id="<?php echo $pluginFolderName; ?>_Transaction_Currency" name="<?php echo $pluginFolderName; ?>_plugincustomfields[<?php echo $pluginFolderName; ?>_Transaction_Currency]" value="">

<script src="https://www.paypalobjects.com/api/checkout.js"></script>
<?php if ($this->from == 'signup') { ?>
    <a class="app-btns primary customButton <?php echo $pluginFolderName; ?>Button <?php if (@$this->termsConditions) {
?>disabled<?php
} ?>"></a>
<?php } elseif ($this->from == 'invoice') { ?>
    <button class="app-btns primary customButton <?php echo $pluginFolderName; ?>Button"><?php echo $this->user->lang('Pay Invoice'); ?></button>
<?php } ?>

<div id="paypal-button-show-hide" class="d-none">
    <?php if ($this->fromDirectLink) { ?>
    <div id="paypal-button" style="margin: auto; width: 250px;"></div>
    <?php } else { ?>
    <div id="paypal-button"></div>
    <?php } ?>
</div>

<script data-cfasync="false" type="text/javascript">
        // Render the PayPal button
        paypal.Button.render({
            // Set your environment
            env: '<?php echo $this->environment; ?>',

        // PayPal Client IDs - replace with your own
        // Create a PayPal app: https://developer.paypal.com/developer/applications/create
            client: {
                sandbox: '<?php echo $this->sandboxClientID; ?>',
                production: '<?php echo $this->productionClientID; ?>'
            },

            // Customize button (optional)
            locale: 'en_US',

            // Specify the style of the button
            style: {
                layout: 'horizontal', // horizontal | vertical
                size:   'medium',     // small | medium | large | responsive
                shape:  'rect',       // pill | rect
                color:  'gold'        // gold | blue | silver | black
            },

            //Display "Pay Now" button
            commit: true,

            // Set up a payment
            payment: function (data, actions) {
                return actions.payment.create({
                    transactions: [{
                        <?php if ($this->from == 'invoice') { ?>
                            amount: {
                                total: '<?php echo sprintf("%01.2f", round($this->amount, 2)); ?>',
                                currency: '<?php echo $this->currency;?>'
                            },
                            description: '<?php echo $this->user->lang("Invoice")." #".$this->invoiceId;?>',
                        <?php } elseif ($this->from == 'signup') { ?>
                            amount: {
                                total: Number(document.getElementById("totalPay_raw").value).toFixed(2),
                                currency: '<?php echo $this->Currency;?>'
                            },
                            description: '<?php echo $this->user->lang("New Order");?>',
                        <?php } ?>
                    }]
                });
            },

            // Execute the payment
            onAuthorize: function (data, actions) {
                return actions.payment.execute()
                    .then(function (data2) {
                        document.getElementById('<?php echo $pluginFolderName; ?>_Transaction_ID').value = data2.transactions[0].related_resources[0].sale.id;
                        document.getElementById('<?php echo $pluginFolderName; ?>_Transaction_State').value = data2.transactions[0].related_resources[0].sale.state;
                        document.getElementById('<?php echo $pluginFolderName; ?>_Transaction_Amount').value = data2.transactions[0].related_resources[0].sale.amount.total;
                        document.getElementById('<?php echo $pluginFolderName; ?>_Transaction_Currency').value = data2.transactions[0].related_resources[0].sale.amount.currency;

                        <?php if ($this->from == 'invoice' || $this->from == 'signup') { ?>
                            $('#submitButton').click();
                        <?php } ?>
                    });
    //            return actions.redirect();
            },
            onCancel: function (data, actions) {
                $('#paypal-button-show-hide').addClass('d-none');
                $('.<?php echo $pluginFolderName; ?>Button').removeClass('d-none');
                //return actions.close();
                //return actions.redirect();
            },
            onError: function (error) {
              // You will want to handle this differently
              //console.log(error);
              clientexec.error('<?php echo $this->user->lang("An internal service error has occurred in Paypal. Please try again");?>');
            }
        }, '#paypal-button');

    $('.<?php echo $pluginFolderName; ?>Button').on('click', function(e) {
        <?php if ($this->from == 'signup') { ?>
            if ($('.<?php echo $pluginFolderName; ?>Button').hasClass('disabled')) {
                return;
            }

            var password_validated = true;

            <?php if (!$this->loggedIn) { ?>
                $('#parsley-errors-list-password').remove();
                e.preventDefault();
                if ($('#password').length > 0) {
                    $.ajax({
                        type: "POST",
                        data: {"password": $('#password').val()},
                        url: 'index.php?controller=signup&fuse=admin&action=testpasswordstrength',
                        async: false,
                        success : function(response) {
                            json = clientexec.parseResponse(response);
                            if (!json.valid) {
                                password_validated = false;
                                $('#password').after('<ul id="parsley-errors-list-password" class="parsley-errors-list filled" style="display: block;"><li class="parsley-required" style="display: list-item;">'+ json.errorMessage+'</li></ul>');
                                $('#password').get(0).scrollIntoView();
                            }
                        }
                    });
                }
            <?php } ?>

            $('#submitForm').parsley({
                excluded: 'input[type=button], input[type=submit], input[type=reset], :hidden'
            }).validate();
            if (password_validated && $('#submitForm').parsley().isValid()) {
        <?php } ?>

        $('.<?php echo $pluginFolderName; ?>Button').addClass('d-none');
        $('#paypal-button-show-hide').removeClass('d-none');

        <?php if ($this->from == 'signup') { ?>
            }
        <?php } ?>

        e.preventDefault();
    });
    $( document ).ready(function() {
        $('.<?php echo $pluginFolderName; ?>Button').click();
    });
</script>